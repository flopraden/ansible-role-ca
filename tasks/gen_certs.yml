---
- set_fact:
    certs: "{{ subcerts |default(certs) }}"
    ca_crt: "{{ certs_dir }}/{{ CA_name|default('NONE') }}/fullchain.pem"
    ca_key: "{{ certs_dir }}/{{ CA_name|default('NONE') }}/privkey.pem"
    certpass: "{{ certs_pass }}"

- name: "make sure all certs dir is present"
  file:
    state: directory
    path: "{{ certs_dir }}/{{ cert.key }}"
    owner: root
    group: root
    mode: 0755
  loop: "{{ lookup('dict', certs, wantlist=True) }}"
  loop_control:
    loop_var: cert

- name: "Generate private key"
  include: cert-privkey.yml
  loop: "{{ lookup('dict', certs, wantlist=True) }}"
  loop_control:
    loop_var: cert

- name: "Create certificate request"
  openssl_csr:
    path: "{{ certs_dir }}/{{ cert.key }}/priv.csr"
    privatekey_path: "{{ certs_dir }}/{{ cert.key }}/privkey.pem"
    privatekey_passphrase: "{{ certpass }}"
    common_name: "{{ cert.value.CN |default(omit)}}"
    country_name: "{{ cert.value.C | default(certs_C) }}"
    email_address: "{{ cert.value.EMAIL | default(certs_EMAIL) }}"
    state_or_province_name: "{{ cert.value.S | default(certs_S) }}"
    locality_name: "{{ cert.value.L | default(certs_L) }}"
    organization_name: "{{ cert.value.O | default(certs_O) }}"
    organizational_unit_name: "{{ cert.value.OU | default(certs_OU) }}"
    subject_alt_name: "{{ cert.value.SAN|default(omit) }}"
    basic_constraints: "{{ (cert.value.CA is defined)|ternary('CA:TRUE','CA:FALSE') + 
                           ((cert.value.CA is undefined) or (cert.value.CA.pathlen is undefined))|ternary('',',pathlen:' + cert.value.CA.pathlen|default('0')|string)
                        }}"
    basic_constraints_critical: 'true'
    key_usage: "{{ 'keyCertSign,cRLSign,digitalSignature' if cert.value.CA is defined else cert.value.KU | default(certs_KU) }}"
    key_usage_critical: true
    extended_key_usage: "{{ 'serverAuth,clientAuth' if cert.value.CA is defined else  cert.value.EKU | default(certs_EKU) }}"
    extended_key_usage_critical: 'true'
    ocsp_must_staple: "{{ cert.value.oscp_staple | default('false') }}"
    ocsp_must_staple_critical: 'false'
  loop: "{{ lookup('dict', certs, wantlist=True) }}"
  loop_control:
    loop_var: cert

- name: Generate signed cert.value.
  openssl_certificate:
    path: "{{ certs_dir }}/{{ cert.key }}/fullchain.pem"
    privatekey_path: "{{ certs_dir }}/{{ cert.key }}/privkey.pem"
    privatekey_passphrase: "{{ certpass }}"
    csr_path: "{{ certs_dir }}/{{ cert.key }}/priv.csr"
    ownca_path: "{{ ca_crt }}"
    ownca_privatekey_passphrase: "{{ certpass }}"
    ownca_privatekey_path: "{{ ca_key }}"
    ownca_not_after: "{{ cert.value.notafter | default(certs_NOTAFTER) }}"
    provider: ownca
  when: cert.value.casigned is defined
  loop: "{{ lookup('dict', certs, wantlist=True) }}"
  loop_control:
    loop_var: cert

- name: Generate self-signed cert.value.
  openssl_certificate:
    path: "{{ certs_dir }}/{{ cert.key }}/fullchain.pem"
    privatekey_path: "{{ certs_dir }}/{{ cert.key }}/privkey.pem"
    privatekey_passphrase: "{{ certpass }}"
    csr_path: "{{ certs_dir }}/{{ cert.key }}/priv.csr"
    selfsigned_not_after: "{{ cert.value.notafter | default(certs_NOTAFTER) }}"
    provider: selfsigned
  when: cert.value.selfsigned is defined
  loop: "{{ lookup('dict', certs, wantlist=True) }}"
  loop_control:
    loop_var: cert

- name: Generate sub-certs
  include_tasks: gen_certs.yml
  vars:
    subcerts: "{{ cert.value.subcerts }}"
    CA_name: "{{ cert.key }}"
  when: cert.value.subcerts is defined
  loop: "{{ lookup('dict', certs, wantlist=True) }}"
  loop_control:
    loop_var: cert

