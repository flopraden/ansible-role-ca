---
- name: "Set facts for CRL."
  set_fact:
    cert_dir: "{{ cert.dir |default(pki.common.dir + '/' + cert.name) }}"
    certpass: "{{ cert.pass|default(pki.common.pass) }}"

# Check CRL regeneration.
- block:
    - debug:
        msg: "Checking {{ cert.name }} CRL"

    - name: "Check new revocation"
      stat:
        checksum_algorithm: "sha512"
        path: "{{ cert_dir }}/index.txt"
        get_attributes: no
      register: indexfile

    - name: "Check CRL"
      stat:
        checksum_algorithm: "sha512"
        path: "{{ cert_dir }}/current.crl"
        get_attributes: no
      register: crlfile

    - name: "CRL should exists."
      assert:
        that:
          - not crlfile.failed
          - crlfile.stat.exists
        fail_msg: "CRL file  for {{ cert.name }} does not exists"
        success_msg: "CRL file exists for {{ cert.name }}."
        quiet: true

    - name: "Index should exists."
      assert:
        that:
          - not indexfile.failed
          - indexfile.stat.exists
        fail_msg: "Index file  for {{ cert.name }} does not exists"
        success_msg: "Index file exists for {{ cert.name }}."
        quiet: true

    - name: "CRL should be newer"
      assert:
        that:
          - not indexfile.failed
          - indexfile.stat.mtime < crlfile.stat.mtime
        fail_msg: "index file  for {{ cert.name }} is newer that CRL file: {{ indexfile.stat.mtime }} / {{ crlfile.stat.mtime }}"
        success_msg: "CRL is newer than index file for {{ cert.name }}."
        quiet: true

    - name: "Check CRL expiration date"
      shell:
        cmd: "date --date=\"$(openssl crl -nextupdate -noout -in '{{ cert_dir }}/current.crl' -CAfile '{{ cert_dir }}/fullchain.pem'|grep 'nextUpdate='|sed -e 's/nextUpdate=//g')\" -Is --utc|sed -e 's/\\+00:00/+0000/g'"
      register: nextupdate
      changed_when: false

    - name: "Validate that CRL is OK"
      assert:
        that:
          - nextupdate.rc == 0
          - nextupdate.stderr == "verify OK"
        fail_msg: "CRL for {{ cert.name }} is not OK: {{ nextupdate.stderr }} / {{ nextupdate.rc }}"
        success_msg: "CRL for {{ cert.name }} valid."
        quiet: true

    - name: "Check CRL validity in time."
      assert:
        that:
          - ((nextupdate.stdout|to_datetime('%Y-%m-%dT%H:%M:%S%z')) - ((ansible_date_time.date + 'T' + ansible_date_time.time + ansible_date_time.tz_offset)|to_datetime('%Y-%m-%dT%H:%M:%S%z'))).total_seconds() - pki.common.expiration_threshold.CRL >= 0
        fail_msg: "Certificate CRL {{ cert.name }} is outdated!! CRL: {{ nextupdate.stdout }}, now: {{ ansible_date_time.epoch }}, threshold: {{ pki.common.expiration_threshold.CRL }} ."
        success_msg: "CRL for {{ cert.name }} is not outdated."
        quiet: true
    - debug:
        msg: "CRL {{ cert.name }} is still valid no need to generate"
      
  rescue:
    - name: "Generate CRL"
      shell:
        cmd: "openssl ca -config '{{ cert_dir }}/ca.conf' -gencrl -out '{{ cert_dir }}/current.crl' -key '{{ certpass }}'"
